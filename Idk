#new topic!
#introductions to files, read, write them, and search within them (this is a big part of the second homeworks)
#this is useful cause we can store information and data we get from our python instructions not in the terminal but in an external file
#we have different modes to access files, read, write and buffer. 
#the keyword is "open()", and in the brackets the file we want to access. we may have to specify the encoding, which is the kind of characters, in our case it is utf-8
#to immediatly access the file we can put it in the same folder our python code is. 
#to close the file (which we should always do when were done, we just write var.close)

#so f = open("hello.txt", w) w indicates that we want to edit the file, (w stands for write), another way is to use the "a", as for append, and that will add at the end of the file your modifications
'''
with open("hello.txt", "r") as f:
    header = f.readline()#the readlines function creates a list in which element is a line, and so a string, still in this case "data" is a LIST
    data = f.readlines()
print(data[1])#will print just the first line, thanks to the [1] after data. 
'''
#the .split() function will result in a list that contains the elements of the given string, it will tell them apart by spaces present in the given string
#however it can be specified the character that "splits" the string, we can choose the "separator". it is used like this: .split(",") for using commas as a separator
#the .split() function can have just one argument, so just one type of separator. we can solve this by replacing for examples hashes with a comma, with the .replace function
#or again, we can use the .strip() function to remove some selected characters from a string, allowing us to split correctly, and it even allows us to specify more than one character


#instead, to write new files in python, we can use the open function with the w argument. even if w overwrites the whole file, so to add to it, we use the a argument. now we can use the.write function on the opened file.

# quick and simple exericse: write a python program that reads numbers from a file and stores even numbers in even.txt and odd numbers in odd.txt

# read the file
'''
with open("numbers.txt", "r") as read_file:
    numberlist = read_file.read()
    numberlist = numberlist.split(",")#to split the numbers stored in the text file
    # now numberlist is a list, in which each element is a number present in the txt file, and we can access each number in a list
    # however whatever you read from a txt file will be considered as a string character
    
    # open the files to be filled
with open("even.txt", "w") as even_file: #of course in w mode so that we can write on this files, not just read them
    with open("odd.txt", "w") as odd_file:
        # check if the number is odd or even, then apend it in the right place
        for element in numberlist:
            if int(element) % 2 == 0:
                even_file.write(element + "/n")
            else:
                odd_file.write(element + "/n")



print(read_list)
'''

# we are going to use dictionaries, it works as a literal dictionary, each element of  dictionary is a pair, as it has a key and the element associated with that key

# eng2ita = {"one":"uno","two":"due","three":"tre"} # in python curly brackets represent dictionaries
# numbers in english represent the key, the ones in italian the value associated with their own key
# dictionaries do have functions to modify them, of course. to add a new key together with a new value, use eng2ita["four"] = "quattro"
# notice that we used square brackets as we use them to access data in general, they are not strictly associated with lists.
# in dictionaries a key can apear only once. 

# program that can handle a class data with a single dictionary

class_dict = {
    "student1" : {
        "name":"mickey",
        "lastname" : "mouse",
        "grades" : {
            "physics" : 18,
            "computer science" : 25
        }
    },#we have to use the same keys we used for the first student, of course
    "student2":{
        "name":"gianni",
        "lastname":"cicoria",
        "grades":{
            "physics":18,
            "computer science":18
        }
    }
}
# this tree branch like structure helps creating ordered data

# tuples and sets

# a tuple is a list that cannot be changed.
# a set is a list with no order relationship
# L5I25HXU code for course evaluation


# creating your own data type, with a thing called CLASSES, which often simplify our job. all the standard data types are actually classes
# we use dictionaries to interact with classes. 
# we want to create a class to handle the data about, using the previous examples, stundents, in thisway:
'''
class Student():
    student_id = None
    name = None
    lastname = None
    degree = None
    grades = {}

this defines our data type

'''
# Student class usage is now to be done this way:
'''
stud1 = Student()
stud1.(any of the data we stored in a class, so student_id, name, lastname ecc)
stud1.name = Giorgio
stud1.lastname = Stramaroni

'''
# we-ve now modified owr special data type, thanks to class
# of course the new data type we-ve created can go inside lists and other type of interactions, too.

'''
Class Example

class Point():
    def __init__(self,x,y)
    self.x = x
    self.y = y

that is the point class definition, the init initializes the class to the type of data it will interact with
the self is necessary as from the outside, when we call the class, or data type, we need a var to be used as the name of the point which we want the coordinates from


point = Point(2,6)

'''
# a method is a function inside a class, while a function is a function outside


# Inheritance, last topic of the course, its a way of using classes without applicating the data

class Person():
    def __init__(self,name=None,lastname=None,plusinfo=None):
        self.name = nome
        self.lastname = cognome
        self.plusinfo = dob
    def Printdata(self):
        print(f"Name is {self.name}, Last name is {self.lastname}, plusinfo is {self.plusinfo}")

###############
# Main code

Per = Person("Gigio", "Ole", "Bello")

Per.Printdata()

# Now if we create a new class, lets say Student(), with the same type of data stored inside, so name, lastname, and plusinfo, plus some additional data as grades and course
# So in the end, the class Student() is a special Person() class, but with some additional data
# at this point, when we define the Student() class, we can Inherit the data from the Person() class, like this: we will have to redefine the init function, tho since we have new type of data to use

class Student(Person):
    def __init__(self, name = None, lastname = None, plusinfo = None, studID = None, course = None):
        # we use the super() function to take data from the Person() class
        super().___init___(name, lastname, plusinfo)
        self.studID = studentID
        self.course = takencourse
    # if we dont redefine the functions, the Student() class will simply import the functions inside the Person() class
    # now we can add the additional data the Student() class has more than the Person() one
    # ecc
# now if we call the Student() class it wil store all the datas from the Person() class, so name lastname ecc PLUS the ones we defined inside the Student() class







